{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://remember-pairs-game/./js/script.js"],"sourcesContent":["import '../css/vars.scss';\nimport '../css/main.scss';\nimport '../css/difficulty.scss';\nimport '../css/play.scss';\n\nlet ALL_CARDS = [\n  'hearts-6.svg',\n  'hearts-7.svg',\n  'hearts-8.svg',\n  'hearts-9.svg',\n  'hearts-10.svg',\n  'hearts-jack.svg',\n  'hearts-queen.svg',\n  'hearts-king.svg',\n  'hearts-ace.svg',\n  'diamonds-6.svg',\n  'diamonds-7.svg',\n  'diamonds-8.svg',\n  'diamonds-9.svg',\n  'diamonds-10.svg',\n  'diamonds-jack.svg',\n  'diamonds-queen.svg',\n  'diamonds-king.svg',\n  'diamonds-ace.svg',\n  'spades-6.svg',\n  'spades-7.svg',\n  'spades-8.svg',\n  'spades-9.svg',\n  'spades-10.svg',\n  'spades-jack.svg',\n  'spades-queen.svg',\n  'spades-king.svg',\n  'spades-ace.svg',\n  'clubs-6.svg',\n  'clubs-7.svg',\n  'clubs-8.svg',\n  'clubs-9.svg',\n  'clubs-10.svg',\n  'clubs-jack.svg',\n  'clubs-queen.svg',\n  'clubs-king.svg',\n  'clubs-ace.svg',\n];\n\nconst app = {\n  difficulty: 4,\n  duration: '',\n  generatedCards: [],\n  selectedCards: [],\n};\n\nconst difficultyScreen = document.querySelector('.difficulty-screen');\n\nconst difficulty = difficultyScreen.querySelector('.difficulty');\nconst difficultyButtons = difficulty.querySelectorAll('.difficulty__btn');\nconst btnStart = difficultyScreen.querySelector('.btn-start');\n\ndifficulty.addEventListener('click', (event) => {\n  const target = event.target;\n  if (!target.classList.contains('difficulty__btn')) {\n    return;\n  }\n  difficultyButtons.forEach((btn) => {\n    btn.classList.remove('difficulty__btn_selected');\n  });\n  target.classList.add('difficulty__btn_selected');\n  app.difficulty = +target.dataset.value;\n});\n\nconst gameScreen = document.querySelector('.game-screen');\n\nconst getRandom = (max) => Math.floor(Math.random() * max);\n\nconst generateCards = (difLevel) => {\n  do {\n    let randomCardId = getRandom(ALL_CARDS.length);\n    if (!app.generatedCards.includes(randomCardId)) {\n      app.generatedCards.push(randomCardId);\n    }\n  } while (app.generatedCards.length < difLevel);\n  app.generatedCards = [...app.generatedCards, ...app.generatedCards];\n};\n\nconst hideCards = () => {\n  const cards = gameScreen.querySelectorAll('.card');\n  cards.forEach((card) => {\n    card.src = './static/shirt.svg';\n  });\n};\n\nconst mix = (array) => {\n  return (array = array.sort(() => Math.random() - 0.5));\n};\n\nconst renderCards = () => {\n  app.selectedCards = [];\n  let clicksCounter = 0;\n  const cards = gameScreen.querySelector('.game__cards');\n  cards.innerHTML = '';\n  app.generatedCards.forEach((id) => {\n    const card = document.createElement('img');\n    card.classList.add('card');\n    card.setAttribute('data-id', id);\n    card.src = `./static/${ALL_CARDS[id]}`;\n    cards.appendChild(card);\n\n    function cardClickHandler() {\n      this.src = `./static/${ALL_CARDS[id]}`;\n      if (clicksCounter % 2 === 0) {\n        app.selectedCards.push(id);\n        clicksCounter++;\n      } else {\n        if (app.selectedCards[app.selectedCards.length - 1] !== id) {\n          clearInterval(app.timer);\n          alert('Игра окончена! Вы проиграли.');\n        } else {\n          app.selectedCards.push(id);\n          clicksCounter++;\n        }\n      }\n      if (app.selectedCards.length === app.generatedCards.length) {\n        clearInterval(app.timer);\n        alert('Выигрыш.');\n      }\n      this.removeEventListener('click', cardClickHandler);\n    }\n\n    card.addEventListener('click', cardClickHandler);\n  });\n};\n\nbtnStart.addEventListener('click', () => {\n  difficultyScreen.classList.add('hidden');\n  gameScreen.classList.remove('hidden');\n\n  const gameTimer = gameScreen.querySelector('.game__panel-timer');\n\n  let secs,\n    now,\n    mins = 0;\n\n  function startTimer() {\n    now = Date.now();\n    mins = 0;\n    app.timer = setInterval(function () {\n      secs = Math.floor((Date.now() - now) / 1000);\n      if (secs === 60) {\n        now = Date.now();\n        mins++;\n      }\n      if (secs < 10) {\n        secs = '0' + secs;\n      }\n      gameTimer.innerHTML = mins + '.' + secs;\n    });\n  }\n\n  const showHide5sec = () => {\n    app.duration = `${mins}.${secs}`;\n    clearInterval(app.timer);\n    gameTimer.innerHTML = '0.00';\n    renderCards();\n    setTimeout(function () {\n      hideCards();\n      startTimer();\n    }, 3000);\n  };\n\n  generateCards(app.difficulty);\n  app.generatedCards = mix(app.generatedCards);\n  showHide5sec();\n\n  const btnReset = gameScreen.querySelector('.btn-reset');\n  btnReset.addEventListener('click', () => {\n    showHide5sec();\n  });\n});\n"],"names":["ALL_CARDS","app","difficulty","duration","generatedCards","selectedCards","difficultyScreen","document","querySelector","difficultyButtons","querySelectorAll","btnStart","addEventListener","event","target","classList","contains","forEach","btn","remove","add","dataset","value","gameScreen","renderCards","clicksCounter","cards","innerHTML","id","card","createElement","setAttribute","src","appendChild","cardClickHandler","this","push","length","clearInterval","timer","alert","removeEventListener","gameTimer","secs","now","mins","showHide5sec","setTimeout","Date","setInterval","Math","floor","difLevel","randomCardId","max","random","includes","generateCards","sort"],"sourceRoot":""}